services:
  delivery_db:
    image: mongo:latest
    container_name: delivery_db
    environment:
      - MONGO_INITDB_DATABASE=delivery_db
      - MONGO_INITDB_ROOT_USERNAME=delivery_db
      - MONGO_INITDB_ROOT_PASSWORD=delivery
    ports:
      - "5435:27017"

  commerce_db:
    image: postgres:latest
    container_name: commerce_db
    environment:
      - POSTGRES_DB=commerce_db
      - POSTGRES_USER=commerce_db
      - POSTGRES_PASSWORD=commerce
    ports:
      - "5433:5432"
    # volumes:
      # - ../db-init/commerce/init-commerce.sql:/docker-entrypoint-initdb.d/init-commerce.sql

  payment_db:
    image: postgres:latest
    container_name: payment_db
    environment:
      - POSTGRES_DB=payment_db
      - POSTGRES_USER=pickple
      - POSTGRES_PASSWORD=1234
    ports:
      - "5434:5432"
    volumes:
      - ./db-init/payment/init-payment.sql:/docker-entrypoint-initdb.d/init-payment.sql

  user_db:
    image: postgres:latest
    container_name: user_db
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=user_db
      - POSTGRES_PASSWORD=user_db
    ports:
      - "5432:5432"
    volumes:
      - ./db-init/user/init-user.sql:/docker-entrypoint-initdb.d/init-user.sql

  notification_db:
    image: postgres:latest
    container_name: notification_db
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=pickple
      - POSTGRES_PASSWORD=1234
    ports:
      - "5436:5432"
    volumes:
      - ./db-init/notification/init-notification.sql:/docker-entrypoint-initdb.d/init-notification.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ../settings/prometheus/config:/etc/prometheus
    ports:
      - 9090:9090
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - t4y

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=pickple
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_CHANNEL=${WEBHOOK_FOR_SERVER}
      - GF_TRAFFIC_CHANNEL=${WEBHOOK_FOR_TRAFFIC}
    volumes:
      - ../settings/grafana/provisioning/:/etc/grafana/provisioning/
    restart: always
    depends_on:
      - prometheus
    networks:
      - t4y

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ../settings/grafana/loki/loki-config.yml:/etc/loki/local-config.yml
    command: -config.file=/etc/loki/local-config.yml
    restart: always

  node_exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - t4y

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"
    networks:
      - t4y

networks:
  t4y:
    driver: bridge

volumes:
  grafana-data:
  prometheus-data:
