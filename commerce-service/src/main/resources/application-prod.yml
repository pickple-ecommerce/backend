spring:
  application:
    name: commerce-service
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
  datasource:
    url: ${COMMERCE_DB_URL}
    username: ${COMMERCE_DB_USERNAME}
    password: ${COMMERCE_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: commerce-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  data:
    redis:
      sentinel:
        master:
          host: ${REDIS_HOST}
          port: ${REDIS_PORT}
        nodes:
          - ${REDIS_HOST}:${REDIS_SENTINEL_PORT1}
          - ${REDIS_HOST}:${REDIS_SENTINEL_PORT2}
          - ${REDIS_HOST}:${REDIS_SENTINEL_PORT3}
      timeout: 10000

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL}
    register-with-eureka: true
    fetch-registry: true

server:
  port: ${COMMERCE_SERVER_PORT}

management:
  endpoints:
    web:
      exposure:
        include: prometheus
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_ENDPOINT}
  tracing:
    sampling:
      probability: 0.2

kafka:
  topic:
    payment-create-request: payment-create-request
    delivery-create-request: delivery-create-request
    payment-cancel-request: payment-cancel-request
    delivery-delete-request: delivery-delete-request
    notification-create-request: notification-create-request