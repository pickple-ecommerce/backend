name: Integrated Services Test

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      SLACK_WORKSPACE_URL: ${{ secrets.SLACK_WORKSPACE_URL }}
      WEBHOOK_FOR_SERVER: ${{ secrets.WEBHOOK_FOR_SERVER }}
      WEBHOOK_FOR_TRAFFIC: ${{ secrets.WEBHOOK_FOR_TRAFFIC }}
      LOKI_URL: http://localhost:3100/loki/api/v1/push
    services:
    
      delivery_db:
        image: mongo:latest
        env:
          MONGO_INITDB_DATABASE: delivery_db
          MONGO_INITDB_ROOT_USERNAME: delivery_db
          MONGO_INITDB_ROOT_PASSWORD: delivery
        ports:
          - 5435:27017

      commerce_db:
        image: postgres:latest
        env:
          POSTGRES_DB: commerce_db
          POSTGRES_USER: commerce_db
          POSTGRES_PASSWORD: commerce
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U commerce_db"
          --health-interval 10s --health-timeout 5s --health-retries 5

      payment_db:
        image: postgres:latest
        env:
          POSTGRES_DB: payment_db
          POSTGRES_USER: pickple
          POSTGRES_PASSWORD: 1234
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U pickple"
          --health-interval 10s --health-timeout 5s --health-retries 5

      user_db:
        image: postgres:latest
        env:
          POSTGRES_DB: user_db
          POSTGRES_USER: user_db
          POSTGRES_PASSWORD: user_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user_db"
          --health-interval 10s --health-timeout 5s --health-retries 5

      notification_db:
        image: postgres:latest
        env:
          POSTGRES_DB: notification_db
          POSTGRES_USER: pickple
          POSTGRES_PASSWORD: 1234
        ports:
          - 5436:5432
        options: >-
          --health-cmd "pg_isready -U pickple"
          --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_BROKER_ID: 1
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: --network-alias kafka

      zipkin:
        image: openzipkin/zipkin
        ports:
          - 9411:9411

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      
      - name: Grant execute permission for Gradle Wrapper in root directory
        run: chmod +x ./gradlew
      
      - name: Build and Start Eureka Server
        run: |
          cd eureka-server
          chmod +x ./gradlew # Grant execute permission within the eureka-server directory
          ./gradlew bootJar
          nohup java -jar build/libs/eureka-server-0.0.1-SNAPSHOT.jar &
          cd ..
        env:
          SPRING_PROFILES_ACTIVE: dev
      
      - name: Build Gradle Project
        run: ./gradlew build -Dspring.profiles.active=dev