name: Deploy to AWS ECR

on:
  push:
    branches:
      - develop
  workflow_run:
    workflows: ["build-ci", "docker-integrate-ci", "integrate-ci"]
    types:
      - completed
      
jobs:
  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    - name: Grant execute permission for Gradle Wrapper in root directory
      run: chmod +x ./gradlew
    - name: Build with Gradle Wrapper
      run: ./gradlew bootjar

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # docker compose 를 이용해서 여러 이미지를 모두 빌드하고, 별도의 script를 사용해서 이미지를 push 합니다.
    - name: Build, Tag and Push docker image to AWS ECR
      run: |
        docker compose -f docker/docker-compose.service.yml build
        
        services=("eureka-server" "gateway" "auth-service" "user-service" "commerce-service" "payment-service" "delivery-service" "notification-service")
        for service in "${services[@]}"; do
          docker tag ${ECR_REGISTRY}/${ECR_NAMESPACE}/$service:latest $ECR_REGISTRY/${ECR_NAMESPACE}/$service:$IMAGE_TAG
          docker push $ECR_REGISTRY/${ECR_NAMESPACE}/$service:$IMAGE_TAG
          echo "$service image is built and pushed to AWS ECR"
        done
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_NAMESPACE: ${{ secrets.ECR_NAMESPACE }}
        IMAGE_TAG: "latest"
